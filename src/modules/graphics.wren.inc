// auto-generated file, do not modify
const char* graphicsModule = "/**\n"
"  @Module graphics\n"
"  The graphics module provides all the system functions required for drawing to the screen.\n"
"*/\n"
"import \"point\" for Point\n"
"\n"
"/**\n"
"    @Class Canvas\n"
"      This class provides static methods for drawing primitives and images.\n"
"*/\n"
"class Canvas {\n"
" foreign static f_pset(x, y, c)\n"
" foreign static f_line(x1, y1, x2, y2, c)\n"
" foreign static f_rectfill(x, y, w, h, c)\n"
" foreign static f_rect(x, y, w, h, c)\n"
" foreign static f_print(str, x, y, c)\n"
" foreign static f_circle(x, y, r, c)\n"
" foreign static f_circlefill(x, y, r, c)\n"
" foreign static f_ellipse(x1, y1, x2, y2, c)\n"
" foreign static f_ellipsefill(x1, y1, x2, y2, c)\n"
"\n"
" /**\n"
"     @Method pset\n"
"       Sets the given (x, y) co-ordinate with the Color given.\n"
"       @Param\n"
"         @Name x\n"
"         @Type number\n"
"         The x-coordinate of the pixel to set.\n"
"       @Param\n"
"         @Name y\n"
"         @Type number\n"
"         The y-coordinate of the pixel to set.\n"
"       @Param\n"
"         @Name y\n"
"         @Type Color | number\n"
"         The 32-bit value or Color object representing the color the pixel should be set to.\n"
" */\n"
" static pset(x, y, c) {\n"
"   if (c is Color) {\n"
"     f_pset(x, y, c.rgb)\n"
"   } else {\n"
"     f_pset(x, y, c)\n"
"   }\n"
"\n"
" }\n"
" static line(x0, y0, x1, y1, c) {\n"
"   if (c is Color) {\n"
"     f_line(x0, y0, x1, y1, c.rgb)\n"
"   } else {\n"
"     f_line(x0, y0, x1, y1, c)\n"
"   }\n"
" }\n"
" static ellipse(x0, y0, x1, y1, c) {\n"
"   if (c is Color) {\n"
"     f_ellipse(x0, y0, x1, y1, c.rgb)\n"
"   } else {\n"
"     f_ellipse(x0, y0, x1, y1, c)\n"
"   }\n"
" }\n"
" static ellipsefill(x0, y0, x1, y1, c) {\n"
"   if (c is Color) {\n"
"     f_ellipsefill(x0, y0, x1, y1, c.rgb)\n"
"   } else {\n"
"     f_ellipsefill(x0, y0, x1, y1, c)\n"
"   }\n"
" }\n"
" static rect(x, y, w, h, c) {\n"
"   if (c is Color) {\n"
"     f_rect(x, y, w, h, c.rgb)\n"
"   } else {\n"
"     f_rect(x, y, w, h, c)\n"
"   }\n"
" }\n"
" static rectfill(x, y, w, h, c) {\n"
"   if (c is Color) {\n"
"     f_rectfill(x, y, w, h, c.rgb)\n"
"   } else {\n"
"     f_rectfill(x, y, w, h, c)\n"
"   }\n"
" }\n"
" static circle(x, y, r, c) {\n"
"   if (c is Color) {\n"
"     f_circle(x, y, r, c.rgb)\n"
"   } else {\n"
"     f_circle(x, y, r, c)\n"
"   }\n"
" }\n"
" static circlefill(x, y, r, c) {\n"
"   if (c is Color) {\n"
"     f_circlefill(x, y, r, c.rgb)\n"
"   } else {\n"
"     f_circlefill(x, y, r, c)\n"
"   }\n"
" }\n"
" static print(str, x, y, c) {\n"
"   var color = Color.white\n"
"   if (c is Color) {\n"
"     color = c\n"
"   }\n"
"   f_print(str, x, y, color.rgb)\n"
" }\n"
" static cls() {\n"
"   cls(Color.black)\n"
" }\n"
" static cls(c) {\n"
"   var color = Color.black\n"
"   if (c is Color) {\n"
"     color = c\n"
"   }\n"
"   rectfill(0, 0, Canvas.width, Canvas.height, color.rgb)\n"
" }\n"
" static width { 320 }\n"
" static height { 240 }\n"
"\n"
" static draw(object, x, y) {\n"
"   if (object is ImageData) {\n"
"     object.draw(x, y)\n"
"   }\n"
" }\n"
"}\n"
"\n"
"/**\n"
"    @Class Color\n"
"      An instance of this class represents an RGBA color, which can be passed to Canvas methods.\n"
"*/\n"
"class Color {\n"
"  construct new(r, g, b) {\n"
"    _r = r\n"
"    _g = g\n"
"    _b = b\n"
"    _a = 255\n"
"  }\n"
"  construct new(r, g, b, a) {\n"
"    _r = r\n"
"    _g = g\n"
"    _b = b\n"
"    _a = a\n"
"  }\n"
"\n"
"  rgb { Color.rgb(_r, _g, _b, _a) }\n"
"\n"
"  static white { AllColors[\"white\"] }\n"
"  static black { AllColors[\"black\"] }\n"
"  static red { AllColors[\"red\"] }\n"
"  static orange { AllColors[\"orange\"] }\n"
"  static blue { AllColors[\"blue\"] }\n"
"  static green { AllColors[\"green\"] }\n"
"  static cyan { AllColors[\"cyan\"] }\n"
"  static darkgray { AllColors[\"darkgray\"] }\n"
"  static lightgray { AllColors[\"lightgray\"] }\n"
"\n"
"  static rgb(r, g, b, a) {\n"
"    return a << 24 | r << 16 | g << 8 | b\n"
"  }\n"
"}\n"
"\n"
"var AllColors = {\n"
"  \"black\": Color.new(0, 0, 0),\n"
"  \"white\": Color.new(255, 255, 255),\n"
"  \"orange\": Color.new(255, 163, 0),\n"
"  \"red\": Color.new(255, 0, 0),\n"
"  \"green\": Color.new(0, 255, 0),\n"
"  \"blue\": Color.new(0, 0, 255),\n"
"  \"cyan\": Color.new(0, 255, 255),\n"
"  \"magenta\": Color.new(255, 0, 255),\n"
"  \"yellow\": Color.new(255, 255, 0),\n"
"  \"lightgray\": Color.new(194, 195, 199),\n"
"  \"darkgray\": Color.new(95, 87, 79)\n"
"}\n"
"\n"
"foreign class ImageData {\n"
"  construct fromFile(path) {}\n"
"  static loadFromFile(path) {\n"
"    if (!__cache) {\n"
"      __cache = {}\n"
"    }\n"
"\n"
"    if (!__cache.containsKey(path)) {\n"
"      __cache[path] = ImageData.fromFile(path)\n"
"    }\n"
"\n"
"    return __cache[path]\n"
"  }\n"
"  foreign draw(x, y)\n"
"  foreign drawArea(srcX, srcY, srcW, srcH, destX, destY)\n"
"\n"
"  foreign width\n"
"  foreign height\n"
"}\n"
"\n"
"";
